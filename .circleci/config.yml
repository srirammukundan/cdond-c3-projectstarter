version: 2.1

orbs:
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.  
    
    parameters:
      stack_name:
        default: stack-289fe0f9
        type: string
        
    steps: 
      - run:
          name: Destroy S3 Buckets
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-289fe0f9 --recursive
            aws s3 rb s3://udapeople-289fe0f9 --force
      - run:
          name: Destroy Stacks
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name frontend-289fe0f9
            aws cloudformation delete-stack --stack-name backend-289fe0f9

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          When: on_fail
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = $(curl -H "token:289fe0f9" --request GET https://api.memstash.io/values/migration_289fe0f9)
            echo $SUCCESS
            if[ $SUCCESS== 0 ] 
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

jobs:
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            # SM TEST CODE
            yum install sudo -y
            node --version
            npm --version
            yum install tar -y
            yum install gzip -y
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Get backend url
          command: |
            cd frontend
            touch .env
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=udapeople-backend-289fe0f9" --output text)
            echo "$BACKEND_IP"
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL="$API_URL" >> .env
            cat .env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm i
            npm run build
            aws s3 cp ~/project/frontend/dist s3://udapeople-289fe0f9 --recursive
          # your code here
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/.env
          # your code here
      - destroy-environment
      - revert-migrations
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "aa:79:8f:07:da:96:16:74:7e:89:4a:61:52:9a:5a:c4"
      - attach_workspace:
          at: ~/
      - restore_cache:
          key: backend-build
      - run:
          name: Install dependencies
          command: |
            apk add --update openssh-client
            apk add --update tar gzip curl
            apk add --update ansible
            apk add --update nodejs npm
            pip3 install --upgrade pip 
            pip install awscli
            echo "[defaults]" | cat > .circleci/ansible/ansible.cfg
            echo "host_key_checking = False" | cat >> .circleci/ansible/ansible.cfg
            cd ~/project/backend
            ls -la
            cat .env
          # your code here
      - run:
          name: Deploy backend and install node exporter
          no_output_timeout: 90m
          command: |
            tar -czvf artefacts.tar.gz ./backend
            ls -la
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-galaxy install weareinteractive.environment
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt deploy-backend.yml
            echo "Success"


workflows:
  default:
    jobs:
      - deploy-frontend:
          requires: [deploy-backend]
      - deploy-backend
