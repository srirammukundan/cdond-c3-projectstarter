version: 2.1

orbs:
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.  
    
    parameters:
      stack_name:
        default: stack-$CIRCLE_WORKFLOW_ID
        type: string
        
    steps: 
      - run:
          name: Destroy S3 Buckets
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
      - run:
          name: Destroy Stacks
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
  (curl -H "Content-Type: text/plain" -H "token:${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          When: on_fail
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = (curl -H "token:${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            if[ $SUCCESS== 0 ] 
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end Tests
          command:  |
            cd frontend
            npm i 
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end Tests
          command:  |
            cd backend
            npm i
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
#      - slack/notify:
#          event: fail
#          template: basic_fail_1

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end Audit
          command:  |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force 
            npm audit --audit-level=critical
      - save_cache:
          paths:  [frontend/node_modules]
          key:  frontend-build

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end Audit
          command:  |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force 
            npm audit --audit-level=critical  
      - save_cache:
          paths:  [backend/node_modules]
          key:  backend-build
    
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: install tar and gzip
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
            
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --query \
            'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=instance-state-name,Values=running \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment      
  
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - add_ssh_keys:
          fingerprints: ["aa:79:8f:07:da:96:16:74:7e:89:4a:61:52:9a:5a:c4"]
      - run:
          name: Check files and dir
          command:  |
            ls -a
            pwd
      - attach_workspace:
          at: ~/
      - run:
          name: Check files and dir
          command:  |
            ls -a
            pwd
      - run:
          name: Configure env variables
          command:  |
            pwd
            cd ~/project/
            ls -la
            touch backend/.env
            echo ENVIRONMENT=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST="$TYPEORM_HOST" >> "backend/.env"
            echo TYPEORM_PORT="$TYPEORM_PORT" >> "backend/.env"
            echo TYPEORM_USERNAME="$TYPEORM_USERNAME" >> "backend/.env"
            echo TYPEORM_PASSWORD="$TYPEORM_PASSWORD" >> "backend/.env"
            echo TYPEORM_DATABASE="$TYPEORM_DATABASE" >> "backend/.env"
            echo NODE_ENV=local >> "backend/.env"
            echo "--------------------------------"
            echo "----------Env Variables---------"
            echo "--------------------------------"

            cat backend/.env
     
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add tar
            apk add gzip
            apk add --update ansible
            pip install awscli
            #exit 1
      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            ls -al
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
            #exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/.env
      - destroy-environment
      #  workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure     
    
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
    #  - run:
    #      name: Install dependencies
    #      command: |
    #        sudo apt update
    #        sudo apt upgrade -y
    #        sudo apt install -y awscli
      - run:
          name: Run migrations
          no_output_timeout: 30m
          command: |
            ls -la
            pwd
            cd ~/project/backend
            pwd
            npm i
            npm run build
            npm i pg
            npm run migrations:revert
            echo " pwd ---> " pwd
            ls -la
            ls .env
            cat .env
            touch migrations_dump.txt
            ls
            npm run migrations > ~/project/backend/migrations_dump.txt
            cat migrations_dump.txt
          # Your code here
          # exit 1
      - run:
          name: Send migration results to memstash
          command: |
            cd ~/project/backend
            cat ~/project/backend/migrations_dump.txt
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -H "Content-Type: text/plain" -H "token:${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
              echo migration_${CIRCLE_WORKFLOW_ID}
              echo "SUCCESS = 0"
            else
              echo $(curl -H "Content-Type: text/plain" -H "token:${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7} | grep "No migrations happened")
              echo "migration ID" migration_${CIRCLE_WORKFLOW_ID}
              echo "FAIL = 1"
            fi

          # Your code here
          # exit 1
      - revert-migrations
      - destroy-environment

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Get backend url
          command: |
            cd frontend
            touch .env
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            echo "$BACKEND_IP"
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL="$API_URL" >> .env
            cat .env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm i
            npm run build
            aws s3 cp ~/project/frontend/dist s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}" --recursive
          # your code here
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/.env
          # your code here
      - destroy-environment
      - revert-migrations
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "aa:79:8f:07:da:96:16:74:7e:89:4a:61:52:9a:5a:c4"
      - attach_workspace:
          at: ~/
      - restore_cache:
          key: backend-build
      - run:
          name: Install dependencies
          command: |
            apk add --update openssh-client
            apk add --update tar gzip curl
            apk add --update ansible
            apk add --update nodejs npm
            pip3 install --upgrade pip 
            pip install awscli
            echo "[defaults]" | cat > .circleci/ansible/ansible.cfg
            echo "host_key_checking = False" | cat >> .circleci/ansible/ansible.cfg
            cd backend
            ls
            cat .env
          # your code here
      - run:
          name: Deploy backend and install node exporter
          no_output_timeout: 90m
          command: |
            tar -czvf artefacts.tar.gz ./backend
            ls -la
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-galaxy install weareinteractive.environment
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt deploy-backend.yml
            echo "Success"


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [deploy-backend]
      - deploy-backend:
          requires: [run-migrations]

